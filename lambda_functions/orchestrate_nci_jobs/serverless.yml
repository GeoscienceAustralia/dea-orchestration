# Welcome to Serverless!
#
# This file is the main config file for your service.
#
# For full config options, check the docs:
#    docs.serverless.com
#
#    Sequence of steps before and after sls deploy:
#      1) Create the SQS queue within your service (if sqs queue does not exist)
#      2) Add permissions on the SQS queue to allow S3 to publish notifications
#  https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-configure-lambda-function-trigger.html
#  https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-basic-architecture.html
#      3) Enable and attach event notifications for the desired S3 Bucket to SQS queue
#      4) npm install
#      5) sls deploy --aws-profile <Existing AWS Profile Name> -vv -s prod
#
#  An example of the Amazon States Language that runs an AWS Batch job and monitors the job until it completes


service: orchestrate-nci-jobs

plugins:
  - serverless-python-requirements
  - serverless-pseudo-parameters
  - serverless-step-functions
custom:
  pythonRequirements:
    dockerizePip: non-linux

package:
  exclude:
    - node_modules/**
    - .idea/**
    - .requirements/**
    - env/**
    - README.md
    - package.json
    - package-lock.json
    - requirements.txt

provider:
  name: aws
  runtime: python3.6
  timeout: 60  # 60 seconds. Default is 6 seconds
  memorySize: 128  # in MB, default is 1024
  stage: prod
  # Since SES is not supported in Sydney region, all emails are pushed to the
  # S3 bucket in us-west-2 region. For s3 to trigger SQS and SQS trigger lambda function execution, all the aws
  # resources need to be in the same region as S3 bucket.
  region: ap-southeast-2
  deploymentBucket: "dea-lambdas-dev"

  iamRoleStatements:
  - Effect: 'Allow'
    Action:
      - 'ssm:GetParameter'
      - 'ssm:GetParameters'
      - 'ssm:DescribeParameters'
    Resource:
      - "arn:aws:ssm:#{AWS::Region}:#{AWS::AccountId}:parameter/orchestrator.*"
  - Effect: 'Allow'
    Action: 'kms:Decrypt'
    Resource:
      - "arn:aws:kms:#{AWS::Region}:#{AWS::AccountId}:key/*"
  - Effect: 'Allow'
    Action: 'es:ESHttp*'
    Resource: '*'
  - Effect: 'Allow'
    Action: 'cloudwatch:PutMetricData'
    Resource: '*'
  - Effect: Allow
    Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
    Resource: "arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:provider.environment.DYNAMODB_TABLENAME}"
  - Effect: "Allow"
    Action:
        - "sqs:SendMessage"  # Message added to the SQS queue
    Resource: "arn:aws:sqs:#{AWS::Region}:#{AWS::AccountId}:WaitForTheLogs"
  - Effect: "Allow"
    Action:
      - "s3:GetObject"
    Resource:
      Fn::Join:
        - ""
        - - "arn:aws:s3:::dea-ncimonitoring/NCIEmails/*"
  - Effect: "Allow"
    Action:
      - "states:StartExecution"
    Resource:
      - "*"

  # Service wide environment variables declaration
  environment:
    NCI_PROJECTS: 'rs0,v10,u46,fk4,r78,if87'
    NCI_STORAGE: 'gdata1,gdata1a,gdata1b,gdata2,gdata3,short,massdata'
    SSM_USER_PATH: 'orchestrator.raijin.users.default'
    DEA_AWS_ES_HOST: search-digitalearthaustralia-lz7w5p3eakto7wrzkmg677yebm.ap-southeast-2.es.amazonaws.com
    DEA_MODULE: dea/20181213
    PROJECT: u46
    QUEUE: normal
    DYNAMODB_TABLENAME: "PbsJobInfo-dev"
    TASK_TIMEOUT: 900  # 15 minutes
    TASK_HEARTBEAT: 60  # Ensure task sends heartbeat notifications in intervals of 60 seconds
    SYNC_CMD: 'execute_sync --dea-module ${self:provider.environment.DEA_MODULE}
                  --queue ${self:provider.environment.QUEUE}
                  --project ${self:provider.environment.PROJECT}
                  --year %(year)s
                  --path "%(path)s"
                  --suffixpath "%(suffixpath)s"
                  --product %(product)s
                  --trasharchived %(trasharchived)s'
functions:
  submit_pbs_job:
    handler: handler.submit_pbs_job
    description: Submit Sync job for LS7/LS8 data and store the qsub job id in the dynamodb table
  fetch_job_ids:
    handler: handler.fetch_job_ids
    description: Fetch the qsub job ids from the submission log file and update the same in the dynamodb table
  check_job_status:
    handler: handler.check_job_status
    description: Monitor and update qsub job status


stepFunctions:
  stateMachines:
    Orchestrate_NCI_Jobs:
      name: Orchestrate_NCI_Jobs
      events:
        - schedule:
          rate: cron(10 10 ? * THU *)  # Run every Thursday, at 08:10 pm Canberra time
          enabled: false
      definition:
        Comment: "Submit a sync job"
        StartAt: Submit_Sync_Job
        States:
          Submit_Sync_Job:
            Type: Parallel
            Next: Wait_5_Minutes
            Branches:
            - StartAt: Sync_ls8_nbar_scene
              States:
                Sync_ls8_nbar_scene:
                  Type: Task
                  Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:orchestrate-nci-jobs-dev-submit_pbs_job"
                  TimeoutSeconds: ${self:provider.environment.TASK_TIMEOUT}
                  HeartbeatSeconds: ${self:provider.environment.TASK_HEARTBEAT}
                  Parameters:
                    product: ls8_nbar_scene
                    trasharchived: no
                    year: '2019-2019'
                    path: '/g/data/rs0/scenes/nbar-scenes-tmp/ls8/'
                    suffixpath: '/??/output/nbar/'
                  End: true
            - StartAt: Sync_ls7_nbar_scene
              States:
                Sync_ls7_nbar_scene:
                  Type: Task
                  Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:orchestrate-nci-jobs-dev-submit_pbs_job"
                  TimeoutSeconds: ${self:provider.environment.TASK_TIMEOUT}
                  HeartbeatSeconds: ${self:provider.environment.TASK_HEARTBEAT}
                  Parameters:
                    product: ls7_nbar_scene
                    trasharchived: no
                    year: '2019-2019'
                    path: '/g/data/rs0/scenes/nbar-scenes-tmp/ls7/'
                    suffixpath: '/??/output/nbar/'
                  End: true
            - StartAt: Sync_ls8_nbart_scene
              States:
                Sync_ls8_nbart_scene:
                  Type: Task
                  Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:orchestrate-nci-jobs-dev-submit_pbs_job"
                  TimeoutSeconds: ${self:provider.environment.TASK_TIMEOUT}
                  HeartbeatSeconds: ${self:provider.environment.TASK_HEARTBEAT}
                  Parameters:
                    product: ls8_nbart_scene
                    trasharchived: no
                    year: '2019-2019'
                    path: '/g/data/rs0/scenes/nbar-scenes-tmp/ls8/'
                    suffixpath: '/??/output/nbart/'
                  End: true
            - StartAt: Sync_ls7_nbart_scene
              States:
                Sync_ls7_nbart_scene:
                  Type: Task
                  Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:orchestrate-nci-jobs-dev-submit_pbs_job"
                  TimeoutSeconds: ${self:provider.environment.TASK_TIMEOUT}
                  HeartbeatSeconds: ${self:provider.environment.TASK_HEARTBEAT}
                  Parameters:
                    product: ls7_nbart_scene
                    trasharchived: no
                    year: '2019-2019'
                    path: '/g/data/rs0/scenes/nbar-scenes-tmp/ls7/'
                    suffixpath: '/??/output/nbart/'
                  End: true
            - StartAt: Sync_ls8_pq_scene
              States:
                Sync_ls8_pq_scene:
                  Type: Task
                  Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:orchestrate-nci-jobs-dev-submit_pbs_job"
                  TimeoutSeconds: ${self:provider.environment.TASK_TIMEOUT}
                  HeartbeatSeconds: ${self:provider.environment.TASK_HEARTBEAT}
                  Parameters:
                    product: ls8_pq_scene
                    trasharchived: no
                    year: '2019-2019'
                    path: '/g/data/rs0/scenes/pq-scenes-tmp/ls8/'
                    suffixpath: '/??/output/pqa/'
                  End: true
            - StartAt: Sync_ls7_pq_scene
              States:
                Sync_ls7_pq_scene:
                  Type: Task
                  Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:orchestrate-nci-jobs-dev-submit_pbs_job"
                  TimeoutSeconds: ${self:provider.environment.TASK_TIMEOUT}
                  HeartbeatSeconds: ${self:provider.environment.TASK_HEARTBEAT}
                  Parameters:
                    product: ls7_pq_scene
                    trasharchived: no
                    year: '2019-2019'
                    path: '/g/data/rs0/scenes/pq-scenes-tmp/ls7/'
                    suffixpath: '/??/output/pqa/'
                  End: true
            - StartAt: Sync_ls8_pq_legacy_scene
              States:
                Sync_ls8_pq_legacy_scene:
                  Type: Task
                  Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:orchestrate-nci-jobs-dev-submit_pbs_job"
                  TimeoutSeconds: ${self:provider.environment.TASK_TIMEOUT}
                  HeartbeatSeconds: ${self:provider.environment.TASK_HEARTBEAT}
                  Parameters:
                    product: ls8_pq_legacy_scene
                    trasharchived: no
                    year: '2019-2019'
                    path: '/g/data/rs0/scenes/pq-legacy-scenes-tmp/ls8/'
                    suffixpath: '/??/output/pqa/'
                  End: true
            - StartAt: Sync_ls7_pq_legacy_scene
              States:
                Sync_ls7_pq_legacy_scene:
                  Type: Task
                  Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:orchestrate-nci-jobs-dev-submit_pbs_job"
                  TimeoutSeconds: ${self:provider.environment.TASK_TIMEOUT}
                  HeartbeatSeconds: ${self:provider.environment.TASK_HEARTBEAT}
                  Parameters:
                    product: ls7_pq_legacy_scene
                    trasharchived: no
                    year: '2019-2019'
                    path: '/g/data/rs0/scenes/pq-legacy-scenes-tmp/ls7/'
                    suffixpath: '/??/output/pqa/'
                  End: true
            Catch:
            - ErrorEquals: ["States.ALL"]  # Includes States.Timeout, States.TaskFailed, and States.Permissions
              Next: Task_Failed
          Task_Failed:
            Type: Fail
            Cause: "This is a fallback from a lambda function exception"
          Wait_5_Minutes:  #  Wait for 5 minutes before submitting submit job status
            Type: Wait
            Seconds: 60
            Next: Fetch_Sync_Job_Ids
          Fetch_Sync_Job_Ids:  # Fetch the sync job id and update the status in aws dynamodb database
            Type: Task
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:orchestrate-nci-jobs-dev-fetch_job_ids"
            TimeoutSeconds: ${self:provider.environment.TASK_TIMEOUT}
            HeartbeatSeconds: ${self:provider.environment.TASK_HEARTBEAT}
            Catch:
              - ErrorEquals: ["States.ALL"]  # Includes States.Timeout, States.TaskFailed, and States.Permissions
                Next: Task_Failed
            Next: Wait_30_Minutes
          Wait_30_Minutes:  # Wait for 30 minutes before reading the job status
            Type: Wait
            Seconds: 120
            Next: Get_Sync_Job_Status
          Get_Sync_Job_Status:  # qstat PBS job status and update the status in the dynamodb table
            Type: Task
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:orchestrate-nci-jobs-dev-check_job_status"
            TimeoutSeconds: ${self:provider.environment.TASK_TIMEOUT}
            HeartbeatSeconds: ${self:provider.environment.TASK_HEARTBEAT}
            Catch:
              - ErrorEquals: ["States.ALL"]  # Includes States.Timeout, States.TaskFailed, and States.Permissions
                Next: Task_Failed
            Next: Is_Sync_Job_Complete
          Is_Sync_Job_Complete:  # Check if the sync job is completed
            Type: Choice
            Choices:
            - Variable: "$.jobs_finished"
              StringEquals: "FINISHED"
              Next: Finished
            - Variable: "$.jobs_finished"
              StringEquals: "PENDING"
              Next: Wait_30_Minutes
            Default: DefaultState
          DefaultState:
            Type: Fail
            Cause: "No Choice Matches!"
          Finished:
            Type: Succeed
#            Next: Submit_Ingest_Job
#    Submit_Ingest_Job:
#      definition:
#        Comment: "Submit an Ingest job"
#        States:
#          Submit_Ingest_Job:
#            Type: Task
#            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:orchestrate-nci-jobs-dev-submit_pbs_job"
#            Next: Wait_10_Minutes
#    Wait_10_Minutes:
#      definition:
#        Comment:  "Wait for 300 seconds"
#        States:
#          Wait_10_Minutes:
#            Type: Wait
#            Minutes: 10
#            Next: Update_Ingest_Job_Status
#    Update_Ingest_Job_Status:
#      definition:
#        Comment: "Update QSUB job status information in aws dynamodb database"
#        States:
#          Update_Ingest_Job_Status:
#            Type: Task
#            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:orchestrate-nci-jobs-dev-fetch_job_ids"
#            Next: Wait_45_Minutes
#    Wait_45_Minutes:
#      definition:
#        Comment:  "Wait for 45 minutes"
#        States:
#          Wait_45_Minutes:
#            Type: Wait
#            Minutes: 45
#            Next: Get_Ingest_Job_Status
#    Get_Ingest_Job_Status:
#      definition:
#        Comment:  "Fetch PBS job status from dynamodb table"
#        States:
#          Get_Ingest_Job_Status:
#            Type: Task
#            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:orchestrate-nci-jobs-dev-check_job_status"
#            Next: Is_Ingest_Job_Complete
#    Is_Ingest_Job_Complete:
#      definition:
#        Comment:  "Check if job is completed"
#        States:
#          Is_Ingest_Job_Complete:
#            Type: Choice
#            Choices:
#              - Variable: "$.status"
#                StringEquals: "FAILED"
#                End: true
#              - Variable: "$.status"
#                StringEquals: "SUCCEEDED"
#                Next: Update_Ingest_Complete_Status_DynamoDB
#              Default: Wait_45_Minutes
#            Update_Ingest_Complete_Status_DynamoDB:
#              Type: Task
#              Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:orchestrate-nci-jobs-dev-fetch_job_ids"
#              End: true

#resources:
#  Outputs:
#    MyStateMachine:
#      Description: The ARN of the example state machine
#      Value:
#        Ref: MyStateMachine
