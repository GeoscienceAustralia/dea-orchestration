# Welcome to Serverless!
#
# This file is the main config file for your service.
#
# For full config options, check the docs:
#    docs.serverless.com
#
#    Sequence of steps to run before and after sls deploy:
#      1) npm install --save-dev serverless-step-functions
#      2) sls plugin install -n serverless-python-requirements
#      3) sls plugin install -n serverless-pseudo-parameters
#      4) sls deploy --aws-profile <Profile Name> -v --stage <Deploy Environment Name>
#      5) sls invoke --aws-profile <Profile Name>  -s <Deploy Environment Name> stepf --name Execute_Jobs
#
#  An example of the Amazon States Language that runs an AWS Batch job and monitors the job until it completes

service: execute-jobs

plugins:
  - serverless-python-requirements
  - serverless-pseudo-parameters
  - serverless-step-functions
custom:
  pythonRequirements:
    dockerizePip: non-linux

package:
  exclude:
    - node_modules/**
    - .idea/**
    - .requirements/**
    - env/**
    - README.md
    - package.json
    - package-lock.json
    - requirements.txt

provider:
  name: aws
  runtime: python3.6
  timeout: 60  # 60 seconds. Default is 6 seconds
  memorySize: 128  # in MB, default is 1024
  region: ap-southeast-2
  deploymentBucket: "dea-lambdas-dev"

  iamRoleStatements:
  - Effect: 'Allow'
    Action:
      - 'ssm:GetParameter'
      - 'ssm:GetParameters'
      - 'ssm:DescribeParameters'
    Resource:
      - "arn:aws:ssm:#{AWS::Region}:#{AWS::AccountId}:parameter/orchestrator.*"
  - Effect: 'Allow'
    Action: 'kms:Decrypt'
    Resource:
      - "arn:aws:kms:#{AWS::Region}:#{AWS::AccountId}:key/*"
  - Effect: 'Allow'
    Action: 'es:ESHttp*'
    Resource: '*'
  - Effect: 'Allow'
    Action: 'cloudwatch:PutMetricData'
    Resource: '*'
  - Effect: Allow
    Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
    Resource: "arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:provider.environment.DYNAMODB_TABLENAME}"
  - Effect: "Allow"
    Action:
      - "states:StartExecution"
    Resource:
      - "*"

  # Service wide environment variables declaration
  environment:
    NCI_PROJECTS: 'rs0,v10,u46,fk4,r78,if87'
    NCI_STORAGE: 'gdata1,gdata1a,gdata1b,gdata2,gdata3,short,massdata'
    SSM_USER_PATH: 'orchestrator.raijin.users.default'
    DEA_AWS_ES_HOST: search-digitalearthaustralia-lz7w5p3eakto7wrzkmg677yebm.ap-southeast-2.es.amazonaws.com
    DEA_MODULE: dea/20190329
    PROJECT: u46
    QUEUE: normal
    DYNAMODB_TABLENAME: "PbsJobInfo-dev"
    TASK_TIMEOUT: 900  # 15 minutes
    TASK_HEARTBEAT: 60  # Ensure task sends heartbeat notifications in intervals of 60 seconds
    SYNC_CMD: 'execute_sync --dea-module ${self:provider.environment.DEA_MODULE}
                  --queue ${self:provider.environment.QUEUE}
                  --project ${self:provider.environment.PROJECT}
                  --year %(year)s
                  --path "%(path)s"
                  --suffixpath "%(suffixpath)s"
                  --product %(product)s
                  --trasharchived %(trasharchived)s'
    INGEST_CMD: 'execute_ingest --dea-module ${self:provider.environment.DEA_MODULE}
                    --queue ${self:provider.environment.QUEUE}
                    --project ${self:provider.environment.PROJECT}
                    --year %(year)s
                    --product %(product)s'
    FC_CMD: 'execute_fractional_cover --dea-module ${self:provider.environment.DEA_MODULE}
                --queue ${self:provider.environment.QUEUE}
                --project ${self:provider.environment.PROJECT}
                --year %(year)s
                --product %(product)s
                --tag %(tag)s'
    WOFS_CMD: 'execute_wofs --dea-module ${self:provider.environment.DEA_MODULE}
                  --queue ${self:provider.environment.QUEUE}
                  --project ${self:provider.environment.PROJECT}
                  --year %(year)s
                  --product %(product)s
                  --tag %(tag)s'
    COG_CMD: 'execute_cog_conversion --dea-module ${self:provider.environment.DEA_MODULE}
                 --s3-output %(s3_output)s
                 --cog-product %(cog_product)s
                 --time-range "%(time_range %)s"'
    SUBMIT_JOB_ARN: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:execute-jobs-dev-submit_pbs_job"
    FETCH_JOB_ARN: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:execute-jobs-dev-fetch_job_ids"
    CHECK_JOB_ARN: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:execute-jobs-dev-check_job_status"

functions:
  submit_pbs_job:
    handler: handler.submit_pbs_job
    description: Submit Sync/Ingest/FC/WOfS job for LS7/LS8 data and store the qsub job id in aws dynamodb database
  fetch_job_ids:
    handler: handler.fetch_job_ids
    description: Fetch the qsub job ids from the submission log file and update the same in aws dynamodb database
  check_job_status:
    handler: handler.check_job_status
    description: Monitor and update qsub job status in aws dynamodb database


stepFunctions:
  stateMachines:
    Execute_Jobs:
      name: Execute_Jobs
      events:
        - schedule:
          rate: cron(10 10 ? * THU *)  # Run every Thursday, at 08:10 pm Canberra time
          enabled: false
      definition:
        Comment: "Orchestrate NCI jobs that can self manage job dependencies"
        StartAt: Submit_Sync_Job
        States:
          Submit_Sync_Job:
            Type: Parallel
            Next: Wait_3_Minutes
            Branches:
            - StartAt: Sync_LS8_Nbar_Scene
              States:
                Sync_LS8_Nbar_Scene:
                  Type: Task
                  Resource: ${self:provider.environment.SUBMIT_JOB_ARN}
                  TimeoutSeconds: ${self:provider.environment.TASK_TIMEOUT}
                  HeartbeatSeconds: ${self:provider.environment.TASK_HEARTBEAT}
                  Parameters:
                    execute_cmd:  ${self:provider.environment.SYNC_CMD}
                    product: ls8_nbar_scene
                    trasharchived: no
                    year: '2019-2019'
                    path: '/g/data/rs0/scenes/nbar-scenes-tmp/ls8/'
                    suffixpath: '/??/output/nbar/'
                  End: true
            - StartAt: Sync_LS7_Nbar_Scene
              States:
                Sync_LS7_Nbar_Scene:
                  Type: Task
                  Resource: ${self:provider.environment.SUBMIT_JOB_ARN}
                  TimeoutSeconds: ${self:provider.environment.TASK_TIMEOUT}
                  HeartbeatSeconds: ${self:provider.environment.TASK_HEARTBEAT}
                  Parameters:
                    execute_cmd:  ${self:provider.environment.SYNC_CMD}
                    product: ls7_nbar_scene
                    trasharchived: no
                    year: '2019-2019'
                    path: '/g/data/rs0/scenes/nbar-scenes-tmp/ls7/'
                    suffixpath: '/??/output/nbar/'
                  End: true
            - StartAt: Sync_LS8_Nbart_Scene
              States:
                Sync_LS8_Nbart_Scene:
                  Type: Task
                  Resource: ${self:provider.environment.SUBMIT_JOB_ARN}
                  TimeoutSeconds: ${self:provider.environment.TASK_TIMEOUT}
                  HeartbeatSeconds: ${self:provider.environment.TASK_HEARTBEAT}
                  Parameters:
                    execute_cmd:  ${self:provider.environment.SYNC_CMD}
                    product: ls8_nbart_scene
                    trasharchived: no
                    year: '2019-2019'
                    path: '/g/data/rs0/scenes/nbar-scenes-tmp/ls8/'
                    suffixpath: '/??/output/nbart/'
                  End: true
            - StartAt: Sync_LS7_Nbart_Scene
              States:
                Sync_LS7_Nbart_Scene:
                  Type: Task
                  Resource: ${self:provider.environment.SUBMIT_JOB_ARN}
                  TimeoutSeconds: ${self:provider.environment.TASK_TIMEOUT}
                  HeartbeatSeconds: ${self:provider.environment.TASK_HEARTBEAT}
                  Parameters:
                    execute_cmd:  ${self:provider.environment.SYNC_CMD}
                    product: ls7_nbart_scene
                    trasharchived: no
                    year: '2019-2019'
                    path: '/g/data/rs0/scenes/nbar-scenes-tmp/ls7/'
                    suffixpath: '/??/output/nbart/'
                  End: true
            - StartAt: Sync_LS8_PQ_Scene
              States:
                Sync_LS8_PQ_Scene:
                  Type: Task
                  Resource: ${self:provider.environment.SUBMIT_JOB_ARN}
                  TimeoutSeconds: ${self:provider.environment.TASK_TIMEOUT}
                  HeartbeatSeconds: ${self:provider.environment.TASK_HEARTBEAT}
                  Parameters:
                    execute_cmd:  ${self:provider.environment.SYNC_CMD}
                    product: ls8_pq_scene
                    trasharchived: no
                    year: '2019-2019'
                    path: '/g/data/rs0/scenes/pq-scenes-tmp/ls8/'
                    suffixpath: '/??/output/pqa/'
                  End: true
            - StartAt: Sync_LS7_PQ_Scene
              States:
                Sync_LS7_PQ_Scene:
                  Type: Task
                  Resource: ${self:provider.environment.SUBMIT_JOB_ARN}
                  TimeoutSeconds: ${self:provider.environment.TASK_TIMEOUT}
                  HeartbeatSeconds: ${self:provider.environment.TASK_HEARTBEAT}
                  Parameters:
                    execute_cmd:  ${self:provider.environment.SYNC_CMD}
                    product: ls7_pq_scene
                    trasharchived: no
                    year: '2019-2019'
                    path: '/g/data/rs0/scenes/pq-scenes-tmp/ls7/'
                    suffixpath: '/??/output/pqa/'
                  End: true
            - StartAt: Sync_LS8_PQ_Legacy_Scene
              States:
                Sync_LS8_PQ_Legacy_Scene:
                  Type: Task
                  Resource: ${self:provider.environment.SUBMIT_JOB_ARN}
                  TimeoutSeconds: ${self:provider.environment.TASK_TIMEOUT}
                  HeartbeatSeconds: ${self:provider.environment.TASK_HEARTBEAT}
                  Parameters:
                    execute_cmd:  ${self:provider.environment.SYNC_CMD}
                    product: ls8_pq_legacy_scene
                    trasharchived: no
                    year: '2019-2019'
                    path: '/g/data/rs0/scenes/pq-legacy-scenes-tmp/ls8/'
                    suffixpath: '/??/output/pqa/'
                  End: true
            - StartAt: Sync_LS7_PQ_Legacy_Scene
              States:
                Sync_LS7_PQ_Legacy_Scene:
                  Type: Task
                  Resource: ${self:provider.environment.SUBMIT_JOB_ARN}
                  TimeoutSeconds: ${self:provider.environment.TASK_TIMEOUT}
                  HeartbeatSeconds: ${self:provider.environment.TASK_HEARTBEAT}
                  Parameters:
                    execute_cmd:  ${self:provider.environment.SYNC_CMD}
                    product: ls7_pq_legacy_scene
                    trasharchived: no
                    year: '2019-2019'
                    path: '/g/data/rs0/scenes/pq-legacy-scenes-tmp/ls7/'
                    suffixpath: '/??/output/pqa/'
                  End: true
            Catch:
            - ErrorEquals: ["States.ALL"]  # Includes States.Timeout, States.TaskFailed, and States.Permissions
              Next: Task_Failed
          Task_Failed:
            Type: Fail
            Cause: "This is a fallback from a lambda function exception"
          Wait_3_Minutes:  #  Wait for 3 minutes before updating job status
            Type: Wait
            Seconds: 180
            Next: Get_Sync_Job_Ids
          Get_Sync_Job_Ids:  # Fetch sync job id's and update the job status in aws dynamodb database
            Type: Task
            Resource: ${self:provider.environment.FETCH_JOB_ARN}
            TimeoutSeconds: ${self:provider.environment.TASK_TIMEOUT}
            HeartbeatSeconds: ${self:provider.environment.TASK_HEARTBEAT}
            Catch:
              - ErrorEquals: ["States.ALL"]  # Includes States.Timeout, States.TaskFailed, and States.Permissions
                Next: Task_Failed
            Next: Wait_30_Minutes
          Wait_30_Minutes:  # Wait for 30 minutes before reading the job status
            Type: Wait
            Seconds: 120
            Next: Get_Sync_Job_Status
          Get_Sync_Job_Status:  # qstat PBS job id and update the status in aws dynamodb database
            Type: Task
            Resource: ${self:provider.environment.CHECK_JOB_ARN}
            TimeoutSeconds: ${self:provider.environment.TASK_TIMEOUT}
            HeartbeatSeconds: ${self:provider.environment.TASK_HEARTBEAT}
            Catch:
              - ErrorEquals: ["States.ALL"]  # Includes States.Timeout, States.TaskFailed, and States.Permissions
                Next: Task_Failed
            Next: Is_Sync_Job_Complete
          Is_Sync_Job_Complete:  # Check if the sync job is completed
            Type: Choice
            Choices:
            - Variable: "$.jobs_finished"
              BooleanEquals: true
              Next: Submit_Ingest_Job
            - Variable: "$.jobs_finished"
              BooleanEquals: false
              Next: Wait_30_Minutes
            Default: FailedChoiceState
          FailedChoiceState:
            Type: Fail
            Cause: "No Choice Matches!"
          Submit_Ingest_Job:
            Type: Parallel
            Next: Wait_5_Minutes
            Branches:
            - StartAt: Ingest_LS8_Nbar_Albers
              States:
                Ingest_LS8_Nbar_Albers:
                  Type: Task
                  Resource: ${self:provider.environment.SUBMIT_JOB_ARN}
                  TimeoutSeconds: ${self:provider.environment.TASK_TIMEOUT}
                  HeartbeatSeconds: ${self:provider.environment.TASK_HEARTBEAT}
                  Parameters:
                    execute_cmd:  ${self:provider.environment.INGEST_CMD}
                    product: ls8_nbar_albers
                    year: 2019
                  End: true
            - StartAt: Ingest_LS7_Nbar_Albers
              States:
                Ingest_LS7_Nbar_Albers:
                  Type: Task
                  Resource: ${self:provider.environment.SUBMIT_JOB_ARN}
                  TimeoutSeconds: ${self:provider.environment.TASK_TIMEOUT}
                  HeartbeatSeconds: ${self:provider.environment.TASK_HEARTBEAT}
                  Parameters:
                    execute_cmd:  ${self:provider.environment.INGEST_CMD}
                    product: ls7_nbar_albers
                    year: 2019
                  End: true
            - StartAt: Ingest_LS8_Nbart_Albers
              States:
                Ingest_LS8_Nbart_Albers:
                  Type: Task
                  Resource: ${self:provider.environment.SUBMIT_JOB_ARN}
                  TimeoutSeconds: ${self:provider.environment.TASK_TIMEOUT}
                  HeartbeatSeconds: ${self:provider.environment.TASK_HEARTBEAT}
                  Parameters:
                    execute_cmd:  ${self:provider.environment.INGEST_CMD}
                    product: ls8_nbart_albers
                    year: 2019
                  End: true
            - StartAt: Ingest_LS7_Nbart_Albers
              States:
                Ingest_LS7_Nbart_Albers:
                  Type: Task
                  Resource: ${self:provider.environment.SUBMIT_JOB_ARN}
                  TimeoutSeconds: ${self:provider.environment.TASK_TIMEOUT}
                  HeartbeatSeconds: ${self:provider.environment.TASK_HEARTBEAT}
                  Parameters:
                    execute_cmd:  ${self:provider.environment.INGEST_CMD}
                    product: ls7_nbart_albers
                    year: 2019
                  End: true
            - StartAt: Ingest_LS8_PQ_Albers
              States:
                Ingest_LS8_PQ_Albers:
                  Type: Task
                  Resource: ${self:provider.environment.SUBMIT_JOB_ARN}
                  TimeoutSeconds: ${self:provider.environment.TASK_TIMEOUT}
                  HeartbeatSeconds: ${self:provider.environment.TASK_HEARTBEAT}
                  Parameters:
                    execute_cmd:  ${self:provider.environment.INGEST_CMD}
                    product: ls8_pq_albers
                    year: 2019
                  End: true
            - StartAt: Ingest_LS7_PQ_Albers
              States:
                Ingest_LS7_PQ_Albers:
                  Type: Task
                  Resource: ${self:provider.environment.SUBMIT_JOB_ARN}
                  TimeoutSeconds: ${self:provider.environment.TASK_TIMEOUT}
                  HeartbeatSeconds: ${self:provider.environment.TASK_HEARTBEAT}
                  Parameters:
                    execute_cmd:  ${self:provider.environment.INGEST_CMD}
                    product: ls7_pq_albers
                    year: 2019
                  End: true
            Catch:
            - ErrorEquals: ["States.ALL"]  # Includes States.Timeout, States.TaskFailed, and States.Permissions
              Next: Task_Failed
          Wait_5_Minutes:  #  Wait for 5 minutes before updating job status
            Type: Wait
            Seconds: 60
            Next: Get_Ingest_Job_Ids
          Get_Ingest_Job_Ids:  # Fetch Ingest job id's and update the job status in aws dynamodb database
            Type: Task
            Resource: ${self:provider.environment.FETCH_JOB_ARN}
            TimeoutSeconds: ${self:provider.environment.TASK_TIMEOUT}
            HeartbeatSeconds: ${self:provider.environment.TASK_HEARTBEAT}
            Catch:
              - ErrorEquals: ["States.ALL"]  # Includes States.Timeout, States.TaskFailed, and States.Permissions
                Next: Task_Failed
            Next: Wait_35_Minutes
          Wait_35_Minutes:  # Wait for 35 minutes before reading the job status
            Type: Wait
            Seconds: 120
            Next: Get_Ingest_Job_Status
          Get_Ingest_Job_Status:  # qstat PBS job id and update the status in aws dynamodb database
            Type: Task
            Resource: ${self:provider.environment.CHECK_JOB_ARN}
            TimeoutSeconds: ${self:provider.environment.TASK_TIMEOUT}
            HeartbeatSeconds: ${self:provider.environment.TASK_HEARTBEAT}
            Catch:
              - ErrorEquals: ["States.ALL"]  # Includes States.Timeout, States.TaskFailed, and States.Permissions
                Next: Task_Failed
            Next: Is_Ingest_Job_Complete
          Is_Ingest_Job_Complete:  # Check if the ingest job is completed
            Type: Choice
            Choices:
            - Variable: "$.jobs_finished"
              BooleanEquals: true
              Next: Submit_FC_Job
            - Variable: "$.jobs_finished"
              BooleanEquals: false
              Next: Wait_35_Minutes
            Default: FailedChoiceState
          Submit_FC_Job:
            Type: Parallel
            Next: Wait_2_Minutes
            Branches:
            - StartAt: Run_LS8_FC
              States:
                Run_LS8_FC:
                  Type: Task
                  Resource: ${self:provider.environment.SUBMIT_JOB_ARN}
                  TimeoutSeconds: ${self:provider.environment.TASK_TIMEOUT}
                  HeartbeatSeconds: ${self:provider.environment.TASK_HEARTBEAT}
                  Parameters:
                    execute_cmd:  ${self:provider.environment.FC_CMD}
                    product: ls8_fc_albers
                    year: 2019
                    tag: 'ls8_fc2019'
                  End: true
            - StartAt: Run_LS7_FC
              States:
                Run_LS7_FC:
                  Type: Task
                  Resource: ${self:provider.environment.SUBMIT_JOB_ARN}
                  TimeoutSeconds: ${self:provider.environment.TASK_TIMEOUT}
                  HeartbeatSeconds: ${self:provider.environment.TASK_HEARTBEAT}
                  Parameters:
                    execute_cmd:  ${self:provider.environment.FC_CMD}
                    product: ls7_fc_albers
                    year: 2019
                    tag: 'ls7_fc2019'
                  End: true
            - StartAt: Run_WOfLS
              States:
                Run_WOfLS:
                  Type: Task
                  Resource: ${self:provider.environment.SUBMIT_JOB_ARN}
                  TimeoutSeconds: ${self:provider.environment.TASK_TIMEOUT}
                  HeartbeatSeconds: ${self:provider.environment.TASK_HEARTBEAT}
                  Parameters:
                    execute_cmd:  ${self:provider.environment.WOFS_CMD}
                    product: wofs_albers
                    year: 2019
                    tag: 'wofs_2019'
                  End: true
            Catch:
            - ErrorEquals: ["States.ALL"]  # Includes States.Timeout, States.TaskFailed, and States.Permissions
              Next: Task_Failed
          Wait_2_Minutes:  #  Wait for 2 minutes before updating job status
            Type: Wait
            Seconds: 60
            Next: Get_FC_WOFS_Job_Ids
          Get_FC_WOFS_Job_Ids:  # Fetch FC and WOfS job id's and update the job status in aws dynamodb database
            Type: Task
            Resource: ${self:provider.environment.FETCH_JOB_ARN}
            TimeoutSeconds: ${self:provider.environment.TASK_TIMEOUT}
            HeartbeatSeconds: ${self:provider.environment.TASK_HEARTBEAT}
            Catch:
              - ErrorEquals: ["States.ALL"]  # Includes States.Timeout, States.TaskFailed, and States.Permissions
                Next: Task_Failed
            Next: Get_FC_WOFS_Job_Status
          Get_FC_WOFS_Job_Status:  # qstat PBS job id and update the status in aws dynamodb database
            Type: Task
            Resource: ${self:provider.environment.CHECK_JOB_ARN}
            TimeoutSeconds: ${self:provider.environment.TASK_TIMEOUT}
            HeartbeatSeconds: ${self:provider.environment.TASK_HEARTBEAT}
            Catch:
              - ErrorEquals: ["States.ALL"]  # Includes States.Timeout, States.TaskFailed, and States.Permissions
                Next: Task_Failed
            Next: Is_FC_WOFS_Job_Complete
          Is_FC_WOFS_Job_Complete:  # Check if the Fractional Cover and WOfS jobs are completed
            Type: Choice
            Choices:
            - Variable: "$.jobs_finished"
              BooleanEquals: true
              Next: Submit_Cogger_Job
            - Variable: "$.jobs_finished"
              BooleanEquals: false
              Next: Wait_2_Minutes
            Default: FailedChoiceState
          Submit_Cogger_Job:
            Type: Parallel
            Next: Wait_15_Minutes
            Branches:
            - StartAt: Run_LS8_FC_Cog
              States:
                Run_LS8_FC_Cog:
                  Type: Task
                  Resource: ${self:provider.environment.SUBMIT_JOB_ARN}
                  TimeoutSeconds: ${self:provider.environment.TASK_TIMEOUT}
                  HeartbeatSeconds: ${self:provider.environment.TASK_HEARTBEAT}
                  Parameters:
                    execute_cmd:  ${self:provider.environment.COG_CMD}
                    cog_product: ls8_fc_albers
                    time_range: '2019-2019'
                    s3_output: s3://dea-public-data/fractional-cover/fc/v2.2.1/ls8
                  End: true
            - StartAt: Run_LS7_FC_Cog
              States:
                Run_LS7_FC_Cog:
                  Type: Task
                  Resource: ${self:provider.environment.SUBMIT_JOB_ARN}
                  TimeoutSeconds: ${self:provider.environment.TASK_TIMEOUT}
                  HeartbeatSeconds: ${self:provider.environment.TASK_HEARTBEAT}
                  Parameters:
                    execute_cmd:  ${self:provider.environment.COG_CMD}
                    cog_product: ls7_fc_albers
                    time_range: '2019-2019'
                    s3_output: s3://dea-public-data/fractional-cover/fc/v2.2.1/ls7
                  End: true
            - StartAt: Run_WOfLS_Cog
              States:
                Run_WOfLS_Cog:
                  Type: Task
                  Resource: ${self:provider.environment.SUBMIT_JOB_ARN}
                  TimeoutSeconds: ${self:provider.environment.TASK_TIMEOUT}
                  HeartbeatSeconds: ${self:provider.environment.TASK_HEARTBEAT}
                  Parameters:
                    execute_cmd:  ${self:provider.environment.COG_CMD}
                    cog_product: wofs_albers
                    time_range: '2019-2019'
                    s3_output: s3://dea-public-data/WOfS/WOFLs/v2.1.5/combined
                  End: true
            Catch:
            - ErrorEquals: ["States.ALL"]  # Includes States.Timeout, States.TaskFailed, and States.Permissions
              Next: Task_Failed
          Wait_15_Minutes:  #  Wait for 15 minutes before updating job status
            Type: Wait
            Seconds: 60
            Next: Get_Cogger_Job_Ids
          Get_Cogger_Job_Ids:  # Fetch Cogger job id's and update the job status in aws dynamodb database
            Type: Task
            Resource: ${self:provider.environment.FETCH_JOB_ARN}
            TimeoutSeconds: ${self:provider.environment.TASK_TIMEOUT}
            HeartbeatSeconds: ${self:provider.environment.TASK_HEARTBEAT}
            Catch:
              - ErrorEquals: ["States.ALL"]  # Includes States.Timeout, States.TaskFailed, and States.Permissions
                Next: Task_Failed
            Next: Get_Cogger_Job_Status
          Get_Cogger_Job_Status:  # qstat PBS job id and update the status in aws dynamodb database
            Type: Task
            Resource: ${self:provider.environment.CHECK_JOB_ARN}
            TimeoutSeconds: ${self:provider.environment.TASK_TIMEOUT}
            HeartbeatSeconds: ${self:provider.environment.TASK_HEARTBEAT}
            Catch:
              - ErrorEquals: ["States.ALL"]  # Includes States.Timeout, States.TaskFailed, and States.Permissions
                Next: Task_Failed
            Next: Is_Cog_Job_Complete
          Is_Cog_Job_Complete:  # Check if the cog conversion for Fractional Cover and WOfS jobs are completed
            Type: Choice
            Choices:
            - Variable: "$.jobs_finished"
              BooleanEquals: true
              Next: Finished
            - Variable: "$.jobs_finished"
              BooleanEquals: false
              Next: Wait_15_Minutes
            Default: FailedChoiceState
          Finished:
            Type: Succeed

#resources:
#  Outputs:
#    MyStateMachine:
#      Description: The ARN of the example state machine
#      Value:
#        Ref: MyStateMachine
