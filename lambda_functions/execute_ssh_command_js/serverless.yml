service: execute-on

plugins:
  - serverless-pseudo-parameters
custom:
  Stage: ${opt:stage, self:provider.stage}
  profiles:
    dev: devProfile
    prod: prodProfile
  CustEnv:
    s3Bucket:
      prod: "dea-lambda"
      dev: "dea-lambdas-dev"

provider:
  name: aws
  runtime: nodejs10.x
  timeout: 600  # 10 minutes. Default is 6 seconds
  profile: ${self:custom.profiles.${self:custom.Stage}}
  environment:
    hostkey: 'orchestrator.raijin.users.default.host'
    userkey: 'orchestrator.raijin.users.default.user'
    pkey: 'orchestrator.raijin.users.default.pkey'
    webhook: 'orchestrator.raijin.users.default.slack.webhookurl'
    DEA_MODULE: dea/unstable
    PROJECT: v10
    QUEUE: normal
  region: ap-southeast-2
  deploymentBucket: ${self:custom.CustEnv.s3Bucket.${self:custom.Stage}}
  stackTags:
    repo: https://github.com/GeoscienceAustralia/dea-orchestration
    author: nci.monitor@dea.ga.gov.au
    purpose: nci-automation
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - 'ssm:GetParameters'
        - 'ssm:DescribeParameters'
      Resource:
        - "arn:aws:ssm:#{AWS::Region}:#{AWS::AccountId}:parameter/orchestrator.*"
        - "arn:aws:ssm:#{AWS::Region}:#{AWS::AccountId}:parameter/pipeline.*"
    - Effect: 'Allow'
      Action: 'kms:Decrypt'
      Resource:
        - "arn:aws:kms:#{AWS::Region}:#{AWS::AccountId}:key/*"

functions:
  git_pull_prod:
    handler: handler.execute_ssh_command
    description: Update the scripts repo stored on the NCI server
    environment:
      hostkey: 'orchestrator.raijin.users.git_pull.host'
      userkey: 'orchestrator.raijin.users.git_pull.user'
      pkey: 'orchestrator.raijin.users.git_pull.pkey'
    events:
      - schedule:
          rate: cron(00 10 ? * SUN *)  # Run every Sunday, at 08:00 pm Canberra time
          enabled: false
  execute_deploy:
    handler: handler.execute_ssh_command
    description: Deploy a new environment module on the NCI
    environment:
      cmd: 'execute_deploy <%= module_name %>'
  execute_sync: ${file(execute_sync.yml)}
  execute_coherence: ${file(execute_coherence.yml)}
  execute_notify_on_error_ds: ${file(execute_notify_on_error_ds.yml)}
  execute_clean: ${file(execute_clean.yml)}
  execute_s2ard: ${file(execute_s2ard.yml)}
  execute_s2_to_s3_rolling: ${file(execute_s2_to_s3_rolling.yml)}
