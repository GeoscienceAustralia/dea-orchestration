#!/usr/bin/env python3

import sys
import argparse
import zipfile
import logging

REQUIREMENTS_PATH = 'lambda_functions/{}/requirements.txt'
LOGGER = logging.getLogger()


def get_zip_root_directories(zip_file):
    """get_zip_root_directories returns the directories at the root of a zip file

    :param zip_file: filename for zip file
    """
    root_level_directories = []

    with zipfile.ZipFile(zip_file) as fd:
        # Returns only top level directories
        root_level_directories = [
            x[:-1] for x in
            filter(lambda f: len(f) == f.find('/') + 1, fd.namelist())
        ]

    return root_level_directories


def _create_argparser():
    """_create_argparser creates the argument handler
    """
    parser = argparse.ArgumentParser(description='Helper function to validate function file')
    parser.add_argument('script_name', help='Name of the lambda_function')
    parser.add_argument('zip_file', help='Name of the zip to check')

    return parser


def run(script_name, zip_file):
    """run checks that directories exist in zip file for each of the listed requirements

    :param script_name: name of the lambda function in the lambda_functions directory
    :param zip_file: name of the zip file to check
    """
    zip_file = None
    script_name = None

    args = _create_argparser().parse_args()

    locals().update(vars(args))

    requirements = []
    zip_root_directories = get_zip_root_directories(zip_file)

    with open(REQUIREMENTS_PATH.format(script_name), 'r') as fd:
        requirements = fd.readlines()

    requirements_not_found = [x.split('/')[-1].strip() not in zip_root_directories for x in requirements]

    exit_code = any(requirements_not_found)

    if exit_code:
        for i, not_found in enumerate(requirements_not_found):
            if not_found:
                LOGGER.error(
                    'Unable to find %s library in %s zip file.',
                    requirements[i].split('/')[-1].strip(),
                    zip_file
                )

    return exit_code


if __name__ == '__main__':
    sys.exit(run())
