#!/bin/bash
# Entry point for automated remote access via SSH
#
# This script is responsible for ensuring that only a restricted set of commands
# are available.
#
# The available commands are the names of directories in the `raijin_scripts` dir.
# Defers execution to the `run` executable in the named directory.

# VARS
PARENT_DIR="$(dirname "$0")"
SCRIPT_DIR="../raijin_scripts"
SCRIPT_NOT_FOUND_EXIT_CODE=127

# if executed over ssh use ssh args; otherwise use supplied args
if [[ -z "${SSH_ORIGINAL_COMMAND}" ]]; then
    parts=( "$@" )
else
#    parts=(${SSH_ORIGINAL_COMMAND})
    IFS=" " read -r -a parts <<< "$SSH_ORIGINAL_COMMAND"
fi

SCRIPT_NAME="$(basename "${parts[0]}")"

cd "$PARENT_DIR" || exit 1  # Set the current working dir to this dir

# Allow scripts to be either contained within a directory, or to be a single file
# For scripts within a dir, `run` is the name of the script
if [[ -d "${SCRIPT_DIR}/${SCRIPT_NAME}" ]]; then
     cd "${SCRIPT_DIR}/${SCRIPT_NAME}" || exit 1
     ./run "${parts[@]:1}" # passes along all args
     exit $? # Exit with exit code of last run script
elif [[ -x "$SCRIPT_DIR/${SCRIPT_NAME}" ]]; then
    cd "${SCRIPT_DIR}" || exit 1
    ./"${SCRIPT_NAME}" "${parts[@]:1}"
     exit $? # Exit with exit code of last run script
else
     echo "Unable to find raijin script: '${SCRIPT_NAME}'"
     echo "Try running update_scripts for the latest changes"
     exit ${SCRIPT_NOT_FOUND_EXIT_CODE}
fi
