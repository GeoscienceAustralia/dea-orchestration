#!/usr/bin/env python3.6

import os
import sys
import argparse
import json

DOCS_PATH = 'lambda_functions/{}/env_vars.json'


def _get_environment_variables(filename, environment):
    env_dict = {}
    try:
        with open(filename, 'r') as fd:
            env_dict = json.loads(fd.read()).get(environment, {})

        if env_dict:
            for k, v in env_dict.items():
                print('export {}="{}"'.format(k, v))
        else:
            print('Environment "{}" not in {}'.format(environment, filename))
    except Exception:
        print('File "{}" not found'.format(filename))
        sys.exit(1)

    return env_dict


def _set_vars(env_dict):
    if not env_dict:
        return False

    for k, v in env_dict.items():
        os.environ[k] = v

    return True


def _create_argparser():
    parser = argparse.ArgumentParser(description='Helper function to get environment params')
    parser.add_argument('script_name', help='Name of the lambda function')
    parser.add_argument('--environment', help='Name of the json top level variable', default='default')

    return parser


if __name__ == '__main__':

    args = _create_argparser().parse_args()
    locals().update(vars(args))

    confirm_env = input('Using "{}" environment. Press enter to confirm or type new environment'.format(environment))
    environment = confirm_env or environment
    filename = DOCS_PATH.format(script_name)

    env_dict = _get_environment_variables(filename, environment)

    _set_vars(env_dict)

    sys.path.append('lambda_functions')
    script_file = __import__('{}'.format(script_name))

    script_file.handler(None, None)
